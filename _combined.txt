.
├── README.md
├── _combined.txt
├── analysis_options.yaml
├── concatenate-dart-files.sh
├── firebase.json
├── lib
│   ├── _bin
│   │   └── config.dart
│   ├── app_settings
│   │   ├── app_general_settings.dart
│   │   ├── app_info.dart
│   │   ├── auth_config.dart
│   │   ├── language_settings.dart
│   │   └── theme_settings.dart
│   ├── assets
│   │   ├── images
│   │   └── lottie_animations
│   │       ├── animation.json
│   │       ├── animation10.json
│   │       ├── animation11.json
│   │       ├── animation2.json
│   │       ├── animation3.json
│   │       ├── animation4.json
│   │       ├── animation5.json
│   │       ├── animation6.json
│   │       ├── animation7.json
│   │       ├── animation8.json
│   │       └── animation9.json
│   ├── firebase_options.dart
│   ├── generated
│   │   ├── intl
│   │   │   ├── messages_all.dart
│   │   │   ├── messages_de.dart
│   │   │   ├── messages_en.dart
│   │   │   └── messages_es.dart
│   │   └── l10n.dart
│   ├── globals.dart
│   ├── l10n
│   │   ├── intl_de.arb
│   │   ├── intl_en.arb
│   │   └── intl_es.arb
│   ├── main.dart
│   ├── models
│   │   ├── current_user_data.dart
│   │   ├── general_models.dart
│   │   └── theme_models.dart
│   ├── providers
│   │   ├── auth_provider.dart
│   │   ├── locale_provider.dart
│   │   ├── providers_all.dart
│   │   └── theme_provider.dart
│   ├── routes
│   │   └── routes.dart
│   ├── screens
│   │   ├── _example_screen.dart
│   │   └── common
│   │       ├── home_screen
│   │       ├── loading_screen
│   │       ├── login_screen
│   │       ├── not_found_screen
│   │       └── scanner_screen
│   ├── services
│   │   ├── connectivity_service.dart
│   │   ├── error_reporting_service.dart
│   │   └── firestore_service.dart
│   ├── theme
│   │   └── main_theme
│   │       ├── buttons_theme.dart
│   │       ├── chip_theme.dart
│   │       ├── input_theme.dart
│   │       └── main_theme.dart
│   ├── utils
│   │   ├── debug
│   │   │   ├── log_configurations.dart
│   │   │   └── notify_that_app_is_runing_in_debug_mode.dart
│   │   ├── navigation
│   │   │   └── _old_navigation.dart
│   │   ├── ui
│   │   │   └── is_dark_mode.dart
│   │   └── validation
│   │       └── is_email_valid.dart
│   └── widgets
│       ├── AppScaffold
│       │   └── app_scaffold.dart
│       ├── LoadingCircle
│       │   └── loading_circle.dart
│       ├── NotificationModal
│       │   └── notification_modal.dart
│       ├── NotificationSnackbar
│       │   └── notification_snackbar.dart
│       ├── ThemeAppBar
│       │   └── template_app_bar.dart
│       ├── ThemeFloatingSpeedDialMenu
│       │   └── theme_floating_speed_dial_menu.dart
│       └── ThemeInputTextField
│           └── theme_input_text_field.dart
├── pubspec.lock
├── pubspec.yaml
├── rename-imports.sh
└── template_app.iml

36 directories, 65 files
///// lib/main.dart /////
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:skeletonizer/skeletonizer.dart';
import 'package:gpguard_poc/providers/providers_all.dart';
import 'package:gpguard_poc/routes/routes.dart';
import 'app_settings/auth_config.dart';
import 'globals.dart';
import 'app_settings/app_info.dart';
import 'app_settings/language_settings.dart';
import 'app_settings/theme_settings.dart';
import 'theme/main_theme/main_theme.dart';
import 'utils/debug/log_configurations.dart';
import 'generated/l10n.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await initializeApp();
  logConfigurations();
  runApp(const ProviderScope(child: MyApp()));
}

Future<void> initializeApp() async {
  if (AuthConfig.useFirebase) {
    try {
      await Firebase.initializeApp();
    } catch (e) {
      debugPrint('Error: Firebase initialization failed. $e');

      ///TODO: Show an error screen here or retry the initialization.
    }
  }
}

class MyApp extends ConsumerWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final themeNotifier = ref.watch(themeProvider);
    final localeNotifier = ref.watch(localeProvider);
    final isDarkMode = themeNotifier.themeMode == ThemeMode.dark;

    return SkeletonizerConfig(
      data: SkeletonizerConfigData(
          effect: ShimmerEffect(
            baseColor: isDarkMode
                ? ThemeSettings.seedColor.withOpacity(0.1)
                : Colors.grey[300]!, // Color base del shimmer
            highlightColor: isDarkMode
                ? Colors.grey.withOpacity(0.25)
                : Colors.grey[100]!, // Color de resaltado del shimmer
            duration: const Duration(milliseconds: 2500),
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          enableSwitchAnimation: true,
          containersColor: ThemeSettings.forceSeedColor
              ? ThemeSettings.seedColor
              : Colors.grey),
      child: MaterialApp.router(
        scaffoldMessengerKey: snackbarKey,
        title: AppInfo.appName,
        theme: MainTheme.lightTheme,
        darkTheme: MainTheme.darkTheme,
        themeMode: themeNotifier.themeMode,
        locale: localeNotifier.locale,
        supportedLocales: LanguageSettings.supportedLocales
            .map((e) => Locale.fromSubtags(languageCode: e))
            .toList(),
        localizationsDelegates: const [
          S.delegate,
          GlobalMaterialLocalizations.delegate,
          GlobalWidgetsLocalizations.delegate,
          GlobalCupertinoLocalizations.delegate,
        ],
        localeResolutionCallback: (locale, supportedLocales) {
          if (LanguageSettings.forceDefaultLanguage) {
            return const Locale(LanguageSettings.appDefaultLanguage);
          }
          if (locale != null) {
            for (var supportedLocale in supportedLocales) {
              if (supportedLocale.languageCode == locale.languageCode) {
                return supportedLocale;
              }
            }
          }
          return supportedLocales.first;
        },
        routerDelegate: Routes.router.routerDelegate,
        routeInformationParser: Routes.router.routeInformationParser,
        routeInformationProvider: Routes.router.routeInformationProvider,
      ),
    );
  }
}

///// lib/app_settings/app_general_settings.dart /////
import '../routes/routes.dart';

class AppGeneralSettings {
  static const bool useTopAppBar = false;
  static const bool useFloatingSpeedDialMenu = false;
  static const bool useAppDrawerMenu = false;
  static const String minimumiOSVersion =
      '13.0'; // Set this manually in Xcode & Podfile
  static const String minimumAndroidVersion =
      '23'; // Set this manually in android/app/build.gradle
}

class DebugConfig {
  static const bool debugMode = true;
  static const String? debugDatabaseId =
      null; // The ID you set in Firebase for the database you will be using for debugging - If Null, main database will be used.
  static const bool showDebugPrints = false;
  static const bool bypassLoginScreen =
      true; // If true, login screen will be skipped
  static RouteConfig debugScreen = Routes.notFoundScreen;
  static const forceDebugScreen =
      false; // If true, the route set in debugScreen will be shown and screen protection will be ignored
}

///// lib/app_settings/app_info.dart /////
class AppInfo {
  static const String appName = 'Template App';
}

///// lib/app_settings/auth_config.dart /////
class AuthConfig {
  static const bool useProtectedRoutes = true;
  static const bool useFirebase = false;
  static const bool allowGoogleSignIn = true;
  //TODO: Add scope functionality:
  static const List<String> googleSignInScopes = ['email'];
  static const bool allowFacebookSignIn = false;
  static const bool allowAppleSignIn = false;
  static const bool allowAnonymousSignIn = false;
  static const bool allowEmailSignIn = false;
}

///// lib/screens/common/home_screen/home_screen.dart /////
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:skeletonizer/skeletonizer.dart';
import 'package:gpguard_poc/app_settings/app_general_settings.dart';
import 'package:gpguard_poc/widgets/AppScaffold/app_scaffold.dart';
import '../../../generated/l10n.dart';
import '../../../providers/providers_all.dart';
import '../../../routes/routes.dart';
import '../../../utils/ui/is_dark_mode.dart';

class HomeScreen extends ConsumerStatefulWidget {
  const HomeScreen({super.key});

  @override
  ConsumerState<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends ConsumerState<HomeScreen> {
  bool useAppBar = AppGeneralSettings.useTopAppBar;
  ValueNotifier<bool> isDialOpen = ValueNotifier(false);
  int _sliderValue = 0;
  int _stepperIndex = 0;
  bool exampleSwitchValue = false;
  static const bool isLoading = false;

  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    final themeNotifier = ref.watch(themeProvider);

    final isDarkMode = themeNotifier.themeMode == ThemeMode.dark;
    return AppScaffold(
      isProtected: true,
      appBarTitle: S.of(context).homeScreenTitle,
      body: Skeletonizer(
        enabled: isLoading,
        child: Container(
          height: MediaQuery.of(context).size.height * 0.8,
          child: Column(
            mainAxisSize: MainAxisSize.max,
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              ElevatedButton(
                  onPressed: () {
                    context.go(Routes.scannerScreen.path);
                  },
                  style: ElevatedButton.styleFrom(
                    minimumSize: const Size(double.infinity, 47),
                  ),
                  child: Text('Open scanner')),
            ],
          ),
        ),
      ),
    );
  }
}

///// lib/screens/common/scanner_screen/scanner_screen.dart /////
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

import '../../../widgets/AppScaffold/app_scaffold.dart';

class ScannerScreen extends StatefulWidget {
  const ScannerScreen({super.key});

  @override
  State<ScannerScreen> createState() => _ScannerScreenState();
}

class _ScannerScreenState extends State<ScannerScreen> {
  @override
  Widget build(BuildContext context) {
    return const AppScaffold(
      body: Center(
        child: Text('Scanner Screen'),
      ),
      appBarTitle: 'Scanner Screen',
      isProtected: false,
    );
  }
}

///// lib/widgets/AppScaffold/app_scaffold.dart /////
import 'dart:async';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:lottie/lottie.dart';
import 'package:skeletonizer/skeletonizer.dart';
import 'package:gpguard_poc/app_settings/app_general_settings.dart';
import 'package:gpguard_poc/app_settings/auth_config.dart';
import 'package:gpguard_poc/providers/providers_all.dart';
import 'package:gpguard_poc/utils/ui/is_dark_mode.dart';
import 'package:gpguard_poc/widgets/NotificationModal/notification_modal.dart';
import 'package:gpguard_poc/widgets/NotificationSnackbar/notification_snackbar.dart';

import 'package:go_router/go_router.dart';
import '../../app_settings/theme_settings.dart';
import '../../generated/l10n.dart';
import '../../models/general_models.dart';
import '../../routes/routes.dart';
import '../../screens/common/loading_screen/loading_screen.dart';
import '../ThemeAppBar/template_app_bar.dart';
import '../ThemeFloatingSpeedDialMenu/theme_floating_speed_dial_menu.dart';

class AppScaffold extends ConsumerStatefulWidget {
  final Widget body;
  final bool hideFloatingSpeedDialMenu;
  final String appBarTitle;
  final bool isProtected;
  final bool? useSafeArea;
  final ScrollPhysics? scrollPhysics;
  final LottieAnimationBackground? backgroundAnimation;
  final LottieAnimationBackground? backgroundAnimationDarkMode;
  final bool useTopAppBar;
  final bool showScreenTitleInAppBar;
  final bool? centerTitle;

  const AppScaffold({
    super.key,
    required this.body,
    required this.appBarTitle,
    required this.isProtected,
    this.useSafeArea,
    this.hideFloatingSpeedDialMenu = false,
    this.scrollPhysics,
    this.backgroundAnimation,
    this.backgroundAnimationDarkMode,
    this.useTopAppBar = false,
    this.showScreenTitleInAppBar = true,
    this.centerTitle,
  });

  @override
  AppScaffoldState createState() => AppScaffoldState();
}

class AppScaffoldState extends ConsumerState<AppScaffold> {
  bool _connectivityChecked = false;
  bool _userWentOffline = false;
  Timer? _connectivityTimer;

  @override
  void initState() {
    super.initState();

    final String debugRouteName = DebugConfig.debugScreen.name;

    if (DebugConfig.forceDebugScreen && debugRouteName.isNotEmpty) {
      bool navigationAllowed = true;
      // if (DebugConfig.alwaysAllowNavigation) {
      //   navigationAllowed = true;
      // }
      debugPrint(
          '[DebugConfig.forceDebugScreen is set to true. Target screen is: $debugRouteName. Navigation ${navigationAllowed ? 'allowed' : 'is blocked'}.');
    }
  }

  @override
  void dispose() {
    _connectivityTimer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final auth = ref.watch(authProvider);
    final connectivity = ref.watch(connectivityProvider);

    if (auth.isLoading && !auth.isAuthenticated) {
      return const LoadingScreen();
    }

    _handleProtectedRoutes(auth);
    _checkConnectivity(connectivity);

    return SafeArea(
      bottom: widget.useSafeArea ?? ThemeSettings.useSafeArea,
      top: widget.useSafeArea ?? ThemeSettings.useSafeArea,
      child: Scaffold(
        appBar: (AppGeneralSettings.useTopAppBar || widget.useTopAppBar)
            ? ThemeAppBar(
                appBarHeight: ThemeSettings.appBarHeight,
                centerTitle: widget.centerTitle,
                title: widget.showScreenTitleInAppBar ? widget.appBarTitle : '',
              )
            : null,
        body: Stack(
          fit: StackFit.expand,
          children: [
            _buildBackgroundAnimation(),
            _buildMainContent(auth.isAuthenticated),
            _buildFloatingMenuBackdrop(),
          ],
        ),
        floatingActionButton: ThemeFloatingSpeedDialMenu(
          hideFloatingSpeedDialMenu: widget.hideFloatingSpeedDialMenu,
          isDialOpenNotifier: ValueNotifier(false),
        ),
      ),
    );
  }

  LoadingScreen? _handleProtectedRoutes(auth) {
    if (DebugConfig.forceDebugScreen) {
      return null;
    }

    if (!DebugConfig.bypassLoginScreen &&
        AuthConfig.useProtectedRoutes &&
        widget.isProtected &&
        !auth.isAuthenticated) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        context.go(Routes.loginScreen.path);
      });
    }

    if (!auth.isAuthenticated && widget.isProtected) {
      return const LoadingScreen();
    }
    return null;
  }

  void _checkConnectivity(connectivity) {
    if (!connectivity.isConnected && !_connectivityChecked) {
      _connectivityChecked = true;
      _connectivityTimer?.cancel();
      _connectivityTimer = Timer(
          const Duration(
              seconds: ThemeSettings.secondsUntilNoInternetNotification), () {
        if (!connectivity.isConnected) {
          WidgetsBinding.instance.addPostFrameCallback((_) {
            if (ModalRoute.of(context)?.isCurrent == true) {
              _showNoInternetNotification(context);
              _userWentOffline = true;
            }
          });
        }
      });
    } else if (connectivity.isConnected && _userWentOffline) {
      _connectivityTimer?.cancel();
      _connectivityChecked = false;
      _userWentOffline = false;

      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (ModalRoute.of(context)?.isCurrent == true) {
          _showBackToInternetConnectionNotification(context);
        }
      });
    }
  }

  ScrollPhysics getScrollPhysics() {
    switch (ThemeSettings.defaultScrollPhysics) {
      case 'never':
        return const NeverScrollableScrollPhysics();
      case 'always':
        return const AlwaysScrollableScrollPhysics();
      case 'clamp':
        return const ClampingScrollPhysics();
      default:
        return const AlwaysScrollableScrollPhysics();
    }
  }

  LottieAnimationBackground? getLottieAnimation() {
    final themeIsDark = isDarkMode(context);
    if (themeIsDark && widget.backgroundAnimationDarkMode != null) {
      return widget.backgroundAnimationDarkMode;
    }
    return widget.backgroundAnimation;
  }

  Widget _buildBackgroundAnimation() {
    final animationConfig = getLottieAnimation();
    if (animationConfig != null && animationConfig.active) {
      final screenWidth = MediaQuery.of(context).size.width;
      final screenHeight = MediaQuery.of(context).size.height;
      return Stack(
        children: [
          Positioned(
            left: (screenWidth / 2) +
                animationConfig.x -
                (screenWidth * (animationConfig.width / 100) / 2),
            top: (screenHeight / 2) +
                animationConfig.y -
                (screenWidth * (animationConfig.width / 100) / 2),
            width: screenWidth * (animationConfig.width / 100),
            child: Opacity(
              opacity: animationConfig.opacity,
              child: Lottie.asset(
                animationConfig.animationPath,
              ),
            ),
          ),
          if (animationConfig.blur > 0)
            Positioned.fill(
              child: BackdropFilter(
                filter: ImageFilter.blur(
                    sigmaX: animationConfig.blur, sigmaY: animationConfig.blur),
                child: Container(
                  color: Colors.transparent,
                ),
              ),
            ),
        ],
      );
    }
    return const SizedBox.shrink();
  }

  Widget _buildMainContent(bool isAuthenticated) {
    if (widget.scrollPhysics is NeverScrollableScrollPhysics) {
      return Skeletonizer(
        enabled: !isAuthenticated &&
            widget.isProtected &&
            !DebugConfig.forceDebugScreen &&
            !DebugConfig.bypassLoginScreen,
        child: Padding(
          padding: ThemeSettings.scaffoldPadding,
          child: widget.body,
        ),
      );
    }

    return SingleChildScrollView(
      physics: widget.scrollPhysics ?? getScrollPhysics(),
      child: Column(
        children: [
          Skeletonizer(
            enabled: !isAuthenticated &&
                widget.isProtected &&
                !DebugConfig.forceDebugScreen &&
                !DebugConfig.bypassLoginScreen,
            child: Padding(
              padding: ThemeSettings.scaffoldPadding,
              child: widget.body,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFloatingMenuBackdrop() {
    if (!widget.hideFloatingSpeedDialMenu &&
        AppGeneralSettings.useFloatingSpeedDialMenu) {
      return Positioned.fill(
        child: ValueListenableBuilder(
          valueListenable: ValueNotifier(false),
          builder: (context, value, child) {
            return value
                ? BackdropFilter(
                    filter: ImageFilter.blur(sigmaX: 1, sigmaY: 1),
                    child: Container(
                      color: Colors.black.withOpacity(0.1),
                    ),
                  )
                : const SizedBox.shrink();
          },
        ),
      );
    }
    return const SizedBox.shrink();
  }

  void _showNoInternetNotification(BuildContext context) {
    if (ThemeSettings.noInternetNotificationType == 'snackbar') {
      NotificationSnackbar.showSnackBar(
          message: S.of(context).noInternetConnection,
          icon: Icons.wifi_off,
          variant: 'info',
          duration: 'infinite');
    } else if (ThemeSettings.noInternetNotificationType == 'modal') {
      NotificationModal.noInternetConnection(
        context: context,
        onTapConfirm: () {
          setState(() {
            _connectivityChecked = true;
          });
        },
      );
    } else if (ThemeSettings.noInternetNotificationType == 'dialog') {
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Text(S.of(context).noInternetConnection),
          content: Text(S.of(context).youAreCurrentlyOfflineMessage),
          actions: <Widget>[
            TextButton(
              child: const Text('OK'),
              onPressed: () {
                context.pop();
              },
            ),
          ],
        ),
      );
    }
  }

  void _showBackToInternetConnectionNotification(BuildContext context) {
    if (ThemeSettings.noInternetNotificationType == 'snackbar') {
      NotificationSnackbar.showSnackBar(
          message: S.of(context).backToInternetConnection,
          icon: Icons.wifi,
          variant: 'success',
          duration: 'long');
    } else if (ThemeSettings.noInternetNotificationType == 'modal') {
      NotificationModal.backToInternetConnection(
        context: context,
        onTapConfirm: () {
          setState(() {
            _connectivityChecked = false; // Allow for future offline checks
          });
        },
      );
    } else if (ThemeSettings.noInternetNotificationType == 'dialog') {
      NotificationSnackbar.showSnackBar(
          message: S.of(context).backToInternetConnection,
          icon: Icons.wifi,
          variant: 'success',
          duration: 'long');
    }
  }
}

///// lib/widgets/NotificationSnackbar/notification_snackbar.dart /////
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:gpguard_poc/app_settings/theme_settings.dart';

import '../../globals.dart';

class SnackbarDuration {
  static const String short = 'short';
  static const String long = 'long';
}

class SnackbarVariant {
  static const String error = 'error';
  static const String success = 'success';
  static const String info = 'info';
}

class NotificationSnackbar {
  static void showSnackBar({
    IconData? icon,
    required String message,
    required String variant,
    required String duration,
    int delay = 0,
  }) async {
    if (delay > 0) {
      await Future.delayed(Duration(seconds: delay));
    }

    if (ThemeSettings.useFlutterToast) {
      Fluttertoast.cancel();
      Fluttertoast.showToast(
        msg: message,
        toastLength: duration == SnackbarDuration.long
            ? Toast.LENGTH_LONG
            : Toast.LENGTH_SHORT,
        gravity: ToastGravity.SNACKBAR,
        timeInSecForIosWeb: duration == SnackbarDuration.long ? 3 : 2,
        backgroundColor: variant == SnackbarVariant.success
            ? ThemeSettings.snackBarSuccessBackgroundColor
            : variant == SnackbarVariant.info
                ? ThemeSettings.snackBarInfoBackgroundColor
                : ThemeSettings.snackBarErrorBackgroundColor,
        textColor: ThemeSettings.snackBarErrorTextColor,
        fontSize: ThemeSettings.snackbarFontSize,
      );
      return;
    }

    snackbarKey.currentState?.showSnackBar(SnackBar(
      duration: duration == "infinite"
          ? const Duration(days: 1)
          : duration == SnackbarDuration.short
              ? const Duration(seconds: 2)
              : const Duration(seconds: 5),
      backgroundColor: variant == SnackbarVariant.success
          ? ThemeSettings.snackBarSuccessBackgroundColor
          : variant == SnackbarVariant.info
              ? ThemeSettings.snackBarInfoBackgroundColor
              : ThemeSettings.snackBarErrorBackgroundColor,
      content: Row(
        children: [
          if (icon != null)
            Icon(
              icon,
              color: variant == SnackbarVariant.success
                  ? ThemeSettings.snackBarSuccessTextColor
                  : variant == SnackbarVariant.info
                      ? ThemeSettings.snackBarInfoTextColor
                      : ThemeSettings.snackBarErrorTextColor,
            ),
          SizedBox(width: icon != null ? 8 : 0),
          Flexible(
            child: Text(message,
                style: TextStyle(
                    color: variant == SnackbarVariant.success
                        ? ThemeSettings.snackBarSuccessTextColor
                        : variant == SnackbarVariant.info
                            ? ThemeSettings.snackBarInfoTextColor
                            : ThemeSettings.snackBarErrorTextColor,
                    fontSize: ThemeSettings.snackbarFontSize)),
          ),
        ],
      ),
    ));
  }

  static void hideCurrentSnackBar() {
    if (ThemeSettings.useFlutterToast) {
      Fluttertoast.cancel();
      return;
    }
    snackbarKey.currentState?.hideCurrentSnackBar();
  }
}

///// lib/widgets/NotificationModal/notification_modal.dart /////
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:gpguard_poc/app_settings/theme_settings.dart';
import 'package:gpguard_poc/generated/l10n.dart';
import 'package:intl/intl.dart';

class NotificationModal {
  static void successfulModal({
    required BuildContext context,
    required String title,
    required String message,
    required VoidCallback onTapConfirm,
  }) {
    showModalBottomSheet(
      enableDrag: false,
      isDismissible: false,
      context: context,
      builder: (BuildContext context) {
        return SizedBox(
          height: 300,
          child: Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                const CircleAvatar(
                  backgroundColor: ThemeSettings.snackBarSuccessBackgroundColor,
                  radius: 30,
                  child: Icon(Icons.check, size: 50, color: Colors.white),
                ),
                const SizedBox(height: 20),
                Text(title, style: Theme.of(context).textTheme.headlineSmall),
                const SizedBox(height: 8),
                Text(message, style: Theme.of(context).textTheme.bodyLarge),
                const SizedBox(height: 20),
                SizedBox(
                  width: 200,
                  child: ElevatedButton(
                    onPressed: () {
                      context.pop();
                      onTapConfirm();
                    },
                    child: Text(S.of(context).gotIt),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  static void failedLogin({
    required BuildContext context,
    required VoidCallback onTapConfirm,
    required String errorMessage,
  }) {
    showModalBottomSheet(
      isDismissible: false,
      enableDrag: false,
      context: context,
      builder: (BuildContext context) {
        return SizedBox(
          height: 300,
          child: Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                CircleAvatar(
                  backgroundColor: Theme.of(context).colorScheme.error,
                  radius: 30,
                  child: const Icon(Icons.close, size: 50, color: Colors.white),
                ),
                const SizedBox(height: 15),
                Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text(S.of(context).loginFailed,
                      style: Theme.of(context).textTheme.headlineSmall),
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(
                      horizontal: 32.0, vertical: 12.0),
                  child: Text(errorMessage,
                      textAlign: TextAlign.center,
                      style: Theme.of(context).textTheme.bodyLarge),
                ),
                const SizedBox(height: 12),
                SizedBox(
                  width: 200,
                  child: ElevatedButton(
                    onPressed: () {
                      context.pop();
                      onTapConfirm();
                    },
                    child: Text(S.of(context).ok),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  static void loginFieldsAreEmpty({
    required BuildContext context,
    required Function onTapConfirm,
    required List<String> emptyFields,
  }) {
    showModalBottomSheet(
      isDismissible: false,
      context: context,
      builder: (BuildContext context) {
        return SizedBox(
          height: 300,
          child: Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                const Icon(Icons.warning, size: 50, color: Colors.amber),
                const SizedBox(height: 15),
                Text(S.of(context).emptyFields,
                    style: Theme.of(context).textTheme.headlineSmall),
                const SizedBox(height: 8),
                Text(S.of(context).fillAllFields,
                    style: Theme.of(context).textTheme.bodyLarge),
                const SizedBox(height: 5),
                ...emptyFields
                    .map((element) => Text(toBeginningOfSentenceCase(element),
                        textAlign: TextAlign.start,
                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                              fontWeight: FontWeight.bold,
                            ))),
                const SizedBox(height: 17),
                SizedBox(
                  width: 200,
                  child: ElevatedButton(
                    onPressed: () {
                      context.pop();
                      onTapConfirm();
                    },
                    child: Text(S.of(context).ok),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  static void failedLogout({
    required BuildContext context,
    required onTapConfirm,
  }) {
    showModalBottomSheet(
      isDismissible: false,
      context: context,
      builder: (BuildContext context) {
        return SizedBox(
          height: 300,
          child: Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                CircleAvatar(
                  backgroundColor: Theme.of(context).colorScheme.error,
                  radius: 30,
                  child: const Icon(Icons.close, size: 50, color: Colors.white),
                ),
                const SizedBox(height: 20),
                Text(S.of(context).failedLogout,
                    style: Theme.of(context).textTheme.headlineSmall),
                const SizedBox(height: 8),
                Text(S.of(context).failedLogoutMessage,
                    textAlign: TextAlign.center,
                    style: Theme.of(context).textTheme.bodyLarge),
                const SizedBox(height: 20),
                SizedBox(
                  width: 200,
                  child: ElevatedButton(
                    onPressed: () {
                      context.pop();
                      onTapConfirm();
                    },
                    child: Text(S.of(context).ok),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  static void unauthorizedAccess({
    required BuildContext context,
    required onTapConfirm,
    required String screenName,
  }) {
    showModalBottomSheet(
      isDismissible: false,
      context: context,
      builder: (BuildContext context) {
        return SizedBox(
          height: 300,
          child: Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                CircleAvatar(
                  backgroundColor: Theme.of(context).colorScheme.error,
                  radius: 30,
                  child: const Icon(Icons.close, size: 50, color: Colors.white),
                ),
                const SizedBox(height: 20),
                Text(S.of(context).unauthorizedAccess,
                    style: Theme.of(context).textTheme.headlineSmall),
                const SizedBox(height: 8),
                Text(S.of(context).unauthorizedAccessMessage(screenName),
                    style: Theme.of(context).textTheme.bodyLarge),
                const SizedBox(height: 20),
                SizedBox(
                  width: 200,
                  child: ElevatedButton(
                    onPressed: () {
                      context.pop();
                      onTapConfirm();
                    },
                    child: Text(S.of(context).ok),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  static void noInternetConnection({
    required BuildContext context,
    required onTapConfirm,
  }) {
    showModalBottomSheet(
      isDismissible: true,
      context: context,
      builder: (BuildContext context) {
        return SizedBox(
          height: 300,
          child: Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                const Icon(Icons.wifi_off, size: 50, color: Colors.grey),
                const SizedBox(height: 20),
                Text(S.of(context).noInternetConnection,
                    style: Theme.of(context).textTheme.headlineSmall),
                const SizedBox(height: 8),
                SizedBox(
                  width: 300,
                  child: Text(S.of(context).youAreCurrentlyOfflineMessage,
                      textAlign: TextAlign.center,
                      style: Theme.of(context).textTheme.bodyLarge),
                ),
                const SizedBox(height: 20),
                SizedBox(
                  width: 200,
                  child: ElevatedButton(
                    onPressed: () {
                      context.pop();
                      onTapConfirm();
                    },
                    child: Text(S.of(context).ok),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  static void backToInternetConnection({
    required BuildContext context,
    required onTapConfirm,
  }) {
    showModalBottomSheet(
      isDismissible: true,
      context: context,
      builder: (BuildContext context) {
        return SizedBox(
          height: 300,
          child: Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                const Icon(Icons.wifi, size: 50, color: Colors.green),
                const SizedBox(height: 20),
                Text(S.of(context).backToInternetConnection,
                    style: Theme.of(context).textTheme.headlineSmall),
                const SizedBox(height: 8),
                SizedBox(
                  width: 300,
                  child: Text(S.of(context).backToInternetConnection,
                      textAlign: TextAlign.center,
                      style: Theme.of(context).textTheme.bodyLarge),
                ),
                const SizedBox(height: 20),
                SizedBox(
                  width: 200,
                  child: ElevatedButton(
                    onPressed: () {
                      context.pop();
                      onTapConfirm();
                    },
                    child: Text(S.of(context).ok),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  static void unableToLoginDueToNoInternet({
    required BuildContext context,
    required onTapConfirm,
  }) {
    showModalBottomSheet(
      isDismissible: false,
      context: context,
      builder: (BuildContext context) {
        return SizedBox(
          height: 300,
          child: Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                const Icon(Icons.signal_wifi_connected_no_internet_4_outlined,
                    size: 50, color: Colors.grey),
                const SizedBox(height: 20),
                Text(S.of(context).unableToLoginNoInternet,
                    style: Theme.of(context).textTheme.headlineSmall),
                const SizedBox(height: 8),
                SizedBox(
                  width: 300,
                  child: Text(S.of(context).noInternetMessageOnLoginAttempt,
                      textAlign: TextAlign.center,
                      style: Theme.of(context).textTheme.bodyLarge),
                ),
                const SizedBox(height: 20),
                SizedBox(
                  width: 200,
                  child: ElevatedButton(
                    onPressed: () {
                      context.pop();
                      onTapConfirm();
                    },
                    child: Text(S.of(context).ok),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}

///// lib/providers/auth_provider.dart /////
import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:gpguard_poc/app_settings/app_general_settings.dart';
import 'package:gpguard_poc/app_settings/auth_config.dart';

class AuthorizationProvider extends ChangeNotifier {
  final FlutterSecureStorage storage = const FlutterSecureStorage();
  final FirebaseAuth? _firebaseAuth =
      AuthConfig.useFirebase ? FirebaseAuth.instance : null;
  final GoogleSignIn _googleSignIn =
      GoogleSignIn(scopes: AuthConfig.googleSignInScopes);
  String? _authToken;
  User? _user;
  bool _isLoading = true;

  AuthorizationProvider() {
    _initializeUser();
  }

  String? get authToken => _authToken;
  User? get user => _user;
  bool get isLoading => _isLoading;

  Future<void> _initializeUser() async {
    if (AuthConfig.useFirebase) {
      _user = _firebaseAuth?.currentUser;
      if (_user != null) {
        _authToken = _user!.uid;
      }
    } else {
      _authToken = await storage.read(key: 'auth_token');
    }

    if (DebugConfig.debugMode || DebugConfig.forceDebugScreen) {
      if (_authToken == null && _user == null) {
        debugPrint('[User is not authenticated.]');
      } else {
        debugPrint('[User is authenticated.]');
      }
    }

    if ((!DebugConfig.bypassLoginScreen || DebugConfig.forceDebugScreen) &&
        (_authToken == null && _user == null)) {
      debugPrint('Signing user automatically...');
      GoogleSignInAccount? currentUser = await _googleSignIn.signIn();
      if (currentUser != null) {
        _user = await _handleSignIn(currentUser);
        if (_user != null) {
          _authToken = _user?.uid;
          await setAuthToken(_authToken!);
          notifyListeners();
        }
      }
    }

    _isLoading = false;
    notifyListeners();

    _googleSignIn.onCurrentUserChanged
        .listen((GoogleSignInAccount? account) async {
      if (account != null) {
        _user = await _handleSignIn(account);
        if (_user != null) {
          _authToken = _user?.uid;
          await setAuthToken(_authToken!);
        }
      } else {
        _user = null;
        _authToken = null;
      }
      notifyListeners();
    });

    GoogleSignInAccount? currentUser = await _googleSignIn.signInSilently();
    if (currentUser != null) {
      _user = await _handleSignIn(currentUser);

      if (_user != null) {
        _authToken = _user?.uid;
        await setAuthToken(_authToken!);
        notifyListeners();
      }
    }
  }

  Future<User?> _handleSignIn(GoogleSignInAccount account) async {
    try {
      final GoogleSignInAuthentication googleAuth =
          await account.authentication;
      final AuthCredential credential = GoogleAuthProvider.credential(
        idToken: googleAuth.idToken,
        accessToken: googleAuth.accessToken,
      );

      if (AuthConfig.useFirebase) {
        final UserCredential authResult =
            await _firebaseAuth!.signInWithCredential(credential);
        return authResult.user;
      }
      return null;
    } catch (e) {
      debugPrint('Error during Google sign-in: $e');
      return null;
    }
  }

  Future<void> setAuthToken(String token) async {
    await storage.write(key: 'auth_token', value: token);
    _authToken = token;
    notifyListeners();
  }

  Future<void> clearAuthToken() async {
    await storage.delete(key: 'auth_token');
    _authToken = null;
    _user = null;
    debugPrint('Auth token cleared. User will be logged out.');
    notifyListeners();
  }

  Future<void> signOut(BuildContext context) async {
    if (DebugConfig.bypassLoginScreen) {
      debugPrint(
          'Error: Debug mode is on. Disable it from AppGeneralSettings.bypassLoginScreen in order to proceed with sign out.');
      return;
    }
    await clearAuthToken();
    if (AuthConfig.useFirebase) {
      await _firebaseAuth?.signOut();
    }

    if (AuthConfig.allowGoogleSignIn) {
      await _googleSignIn.signOut();
    }
  }

  bool get isAuthenticated =>
      !isLoading &&
      (DebugConfig.bypassLoginScreen ||
          (_authToken != null && _authToken!.isNotEmpty));

  Future<bool> signInWithEmail(String email, String password) async {
    bool success = false;
    try {
      debugPrint('Signing in with email/password...');

      if (AuthConfig.useFirebase) {
        final UserCredential authResult = await _firebaseAuth!
            .signInWithEmailAndPassword(email: email, password: password);
        _authToken = authResult.user!.uid;
        _user = authResult.user;
        await setAuthToken(_authToken!);
      } else {
        _authToken = email;
        await setAuthToken(_authToken!);
      }

      notifyListeners();
      success = true;
      debugPrint('User logged in successfully.✅');
      return success;
    } catch (error) {
      debugPrint('Error during email/password Sign In: ${error.toString()}');
      success = false;
      return success;
    }
  }

  Future<bool> signInWithGoogle() async {
    bool success = false;
    if (AuthConfig.allowGoogleSignIn) {
      try {
        debugPrint('Signing in with Google...');

        final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();
        if (googleUser != null) {
          debugPrint('Google Sign In successful.');
          final GoogleSignInAuthentication googleAuth =
              await googleUser.authentication;
          final credential = GoogleAuthProvider.credential(
            accessToken: googleAuth.accessToken,
            idToken: googleAuth.idToken,
          );
          if (AuthConfig.useFirebase) {
            final UserCredential? authResult =
                await _firebaseAuth?.signInWithCredential(credential);
            _authToken = authResult?.user!.uid;
            _user = authResult?.user;
            await setAuthToken(_authToken!);
          } else {
            _authToken = googleAuth.accessToken;
            await setAuthToken(_authToken!);
          }

          notifyListeners();
          success = true;
          debugPrint('User logged in successfully.');
          return success;
        }
      } catch (error) {
        debugPrint(
            'Error trying to signing in user using Google: ${error.toString()}');
        success = false;
        return success;
      }
    }
    return success;
  }
}

///// lib/providers/providers_all.dart /////
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:gpguard_poc/providers/auth_provider.dart';
import 'package:gpguard_poc/providers/locale_provider.dart';
import 'package:gpguard_poc/providers/theme_provider.dart';

import '../services/connectivity_service.dart';

final authProvider = ChangeNotifierProvider((ref) => AuthorizationProvider());
final themeProvider = ChangeNotifierProvider((ref) => ThemeProvider());
final localeProvider = ChangeNotifierProvider((ref) => LocaleProvider());
final connectivityProvider =
    ChangeNotifierProvider((ref) => ConnectivityService());

///// lib/providers/theme_provider.dart /////
import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:gpguard_poc/app_settings/theme_settings.dart';

class ThemeProvider extends ChangeNotifier {
  ThemeMode _themeMode = ThemeMode.system;
  final FlutterSecureStorage _storage = const FlutterSecureStorage();

  ThemeProvider() {
    _loadThemeMode();
  }

  ThemeMode get themeMode => _themeMode;

  void toggleTheme(bool isDarkMode) async {
    if (ThemeSettings.forceDefaultThemeMode) {
      debugPrint(
          'Error: Theme mode change forbidden. Forced theme is on. Disable it from ThemeSettings.forceDefaultThemeMode in order to proceed with theme change.');
      return;
    }

    _themeMode = isDarkMode ? ThemeMode.dark : ThemeMode.light;
    notifyListeners();

    String userDefinedTheme = isDarkMode ? 'dark' : 'light';
    await _storage.write(
        key: 'user_defined_theme_mode', value: userDefinedTheme);
  }

  void _loadThemeMode() async {
    if (ThemeSettings.forceDefaultThemeMode) {
      _themeMode = ThemeSettings.defaultThemeMode == 'dark'
          ? ThemeMode.dark
          : ThemeMode.light;
      notifyListeners();
      return;
    }

    String? userDefinedTheme =
        await _storage.read(key: 'user_defined_theme_mode');

    if (userDefinedTheme != null) {
      bool isDarkMode = userDefinedTheme == 'dark';
      _themeMode = isDarkMode ? ThemeMode.dark : ThemeMode.light;
      notifyListeners();
    }
  }
}

///// pubspec.yaml /////
name: gpguard_poc
description: "A new Flutter project."

publish_to: 'none' # Remove this line if you wish to publish to pub.dev

version: 1.0.0+1

environment:
  sdk: '>=3.2.6 <4.0.0'

dependencies:
  flutter:
    sdk: flutter
  flutter_localizations:
    sdk: flutter

  # Cupertino Icons is a Flutter plugin for using Cupertino icons in a Flutter app. (Example of use: Icon(CupertinoIcons.share))
  cupertino_icons: ^1.0.8
  # Riverpod is a Flutter plugin for managing state in a Flutter app.
  flutter_riverpod: ^2.5.1
  # Flutter Secure Storage is a Flutter plugin for storing data securely on the device.
  flutter_secure_storage: ^9.2.2
  # Google Fonts is a Flutter plugin for using Google Fonts in a Flutter app.
  google_fonts: ^6.2.1
  # Fluttertoast is a Flutter plugin for showing toast messages in a Flutter app.
  fluttertoast: ^8.2.6
  # Google Sign In is a Flutter plugin for signing with Google. It is a wrapper around the native Google Sign In libraries.
  google_sign_in: ^6.2.1
  # Sign In Button is a Flutter plugin for creating sign-in buttons in a Flutter app.
  sign_in_button: ^3.2.0
  # Go Router is a Flutter plugin for routing in a Flutter app.
  go_router: ^14.2.0


#  # -----------------  GENERAL PACKAGES  -----------------
#  # Url Launcher is a Flutter plugin for launching a URL in the mobile platform. Supports iOS and Android.
#  url_launcher: ^6.3.0
#  # Cached network image is a Flutter library to show images from the internet and keep them in the cache directory.
#  cached_network_image: ^3.3.1
#  # Google Fonts is a Flutter plugin for using Google Fonts in a Flutter app.
#  google_fonts: ^6.2.1
#  # Flutter Email Validator is a Flutter plugin for validating email addresses in a Flutter app.
#  email_validator: ^2.1.17
#  # Permission Handler is a Flutter plugin for requesting permissions in a Flutter app.
#  permission_handler: ^11.3.1
#  # Image Picker is a plugin for selecting images from the Android and iOS image library, and taking new pictures with the camera:
#  image_picker: ^1.1.2
  # Skeletonizer is a Flutter plugin for creating skeleton loading animations in a Flutter app.
  skeletonizer: ^1.3.0
  # Device Info Plus is a Flutter plugin for getting information about the device the app is running on.
  device_info_plus: ^10.1.0
  # Package Info Plus is a Flutter plugin for getting information about the package the app is running on.
  package_info_plus: ^8.0.0
#  # HTTP is a Flutter plugin for performing HTTP requests. It is a wrapper around the Dart http package.
#  http: ^1.2.1
#  # Webview is a Flutter plugin for rendering web content in a Flutter widget.
#  webview_flutter: ^4.8.0
#  # Share Plus is a Flutter plugin for sharing content (Links to the app, text, emails, files, etc.) from a Flutter app to other apps.
#  share_plus: ^9.0.0
#  # Add 2 Calendar is a Flutter plugin for adding events to the calendar in a Flutter app.
#  add_2_calendar: ^3.0.1
#  # Geo Locator is a Flutter plugin for getting the location of the device in a Flutter app.
#  geolocator: ^12.0.0
#  # Map Launcher is a Flutter plugin for launching maps in a Flutter app.
#  map_launcher: ^2.0.1
#  # Google Maps Flutter is a Flutter plugin for embedding Google Maps in a Flutter app.
#  google_maps_flutter: ^2.7.0
  # Connectivity Plus is a Flutter plugin for getting information about the network connectivity in a Flutter app.
  connectivity_plus: ^6.0.3
#  # Expandable is a Flutter plugin for creating expandable widgets in a Flutter app.
#  expandable: ^5.0.1
#  # Photo View is a Flutter plugin for showing photos in a full-screen view with zooming and panning gestures.
#  photo_view: ^0.15.0
#  # Percent Indicator is a Flutter plugin for showing percentage indicators in a Flutter app.
#  percent_indicator: ^3.0.1

#  # -----------------  WIDGET DESIGN PACKAGES  -----------------
  # Flutter Speed Dial is a Flutter plugin for creating a speed dial menu widget in a Flutter app.
  flutter_speed_dial: ^7.0.0
#  # Badges is a Flutter plugin for creating fancy animated badges in a Flutter app.
#  badges: ^3.1.2
#  # Loading Animation Widget is a Flutter plugin for creating loading animations in a Flutter app.
#  loading_animation_widget: ^1.2.1
#  # Flutter Native Splash is a Flutter plugin for creating a splash screen in a Flutter app.
#  flutter_native_splash: ^2.4.0
#  # Another Flushbar is a Flutter plugin for creating custom snackbars in a Flutter app.
#  another_flushbar: ^1.12.30
#  # Awesome Dialog is a Flutter plugin for creating awesome dialogs in a Flutter app.
#  awesome_dialog: ^3.2.1
#  # Flutter Staggered Grid View is a Flutter plugin for creating staggered grid views in a Flutter app.
#  flutter_staggered_grid_view: ^0.7.0
#  # Animated Toggle Switch is a Flutter plugin for creating animated toggle switches in a Flutter app.
#  animated_toggle_switch: ^1.0.0
#  #Flutter Typeahead is a Flutter input where you can show suggestions to users as they type.
#  flutter_typeahead: ^2.0.0
#  # Mesh Gradient is a Flutter plugin for creating mesh gradients in a Flutter app.
#  mesh_gradient: ^1.3.6
#  # Flutter Slidable is a Flutter plugin for creating slidable widgets in a Flutter app.
#  flutter_slidable: ^3.1.1


  # -----------------  ANIMATIONS  -----------------
  # Lottie is a Flutter plugin for using Lottie animations in a Flutter app.
  lottie: ^3.1.2

#  # -----------------  FONT PACKAGES  -----------------
#  # Auto Size Text is a Flutter plugin for creating auto-size text in a Flutter app.
#  auto_size_text: ^3.0.0

#  # -----------------  ICONS PACKAGES  -----------------
#  # Material Design Icons is a Flutter plugin for using Material Design icons in a Flutter app. (Example of use: Icon(MdiIcons.add))
#  material_design_icons_flutter: ^7.0.7296
#  # Font Awesome Icons is a Flutter plugin for using Font Awesome icons in a Flutter app. (Example of use: Icon(FontAwesomeIcons.addressBook))
#  font_awesome_flutter: ^10.7.0
#  # Icofont Icons is a Flutter plugin for using Icofont icons in a Flutter app. (Example of use: Icon(IcoFontIcons.addressBook))
#  icofont_flutter: ^1.4.0

#  # -----------------  MEDIA PACKAGES  -----------------
#  # Video Player is a Flutter plugin for playing videos in a Flutter app.
#  video_player: ^2.8.7
#  # Audio Player is a Flutter plugin for playing audio in a Flutter app.
#  audioplayers: ^6.0.0

#  # -----------------  UI THEMES  -----------------
#  # Macos UI is a Flutter plugin for creating MacOS themes in a Flutter app.
#  macos_ui: ^2.0.7
#  # Chicago Theme is a Flutter plugin for creating Chicago themes in a Flutter app.
#  chicago_theme: ^0.4.3-dev
#  # Win32 GUI is a Flutter plugin for creating Win32 GUI themes in a Flutter app.
#  win32_gui 1.1.5

# ----------------- FIREBASE PACKAGES -----------------
#  # Firebase Core is a Flutter plugin to use the Firebase platform services.
  firebase_core: ^3.1.1
#  # Flutter Auth is a Flutter plugin that enables Android and iOS authentication using passwords, phone numbers, and identity providers like Google, Facebook, and Twitter.
  firebase_auth: ^5.1.1
#  # Cloud Firestore is a flexible, scalable database for mobile, web, and server development from Firebase and Google Cloud Platform.
  cloud_firestore: ^5.1.0
#  # Firebase Database is a Flutter plugin to use the Firebase Realtime Database API and allow storing and syncing data with a NoSQL cloud database.
#  firebase_database: ^11.0.1
#  # Firebase Storage is a Flutter plugin to use the Firebase Cloud Storage API and allow uploading, downloading, and deleting files in the cloud.
#  firebase_storage: ^12.0.1
#  # Firebase Messaging is a Flutter plugin to use the Firebase Cloud Messaging (FCM) API and allow sending push notifications to Android and iOS users.
#  firebase_messaging: ^15.0.1
#  # Firebase In-App Messaging is a Flutter plugin to use the Firebase In-App Messaging API and allow sending in-app messages to Android and iOS users.
#  firebase_in_app_messaging: ^0.8.0+1
#  # Firebase Crashlytics is a Flutter plugin to use the Firebase Crashlytics API and allow sending crash reports to Firebase.
#  firebase_crashlytics: ^4.0.1
#  # Firebase Analytics is a Flutter plugin to use the Firebase Analytics API and allow sending events to Google Analytics.
#  firebase_analytics: ^11.0.1
#  # Firebase Performance Monitoring is a Flutter plugin to use the Firebase Performance Monitoring API and allow sending performance data to Firebase.
#  firebase_performance: ^0.10.0+1
#  # Firebase Remote Config is a Flutter plugin to use the Firebase Remote Config API and allow fetching remote configuration values from Firebase.
#  firebase_remote_config: ^5.0.1

  intl: any
dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^4.0.0
  intl_utils: ^2.8.7
  flutter_launcher_icons: "^0.13.1"

flutter_launcher_icons:
  android: "launcher_icon"
  ios: true
  image_path: "lib/assets/path_to_your_icon.png"
  min_sdk_android: 23 # Minimum SDK version for Android, adjust as needed

flutter:

  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # To add entire folders of assets to your application, add an assets section, like this:
  assets:
    - lib/assets/lottie_animations/
    - lib/assets/images/


  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #


